{"version":3,"sources":["api.ts","types/FilterType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","FilterType","TodoList","todos","selectedTodo","onChangeSelectedTodo","className","map","todo","id","title","completed","isIdSelected","classNames","type","onClick","TodoFilter","onChangeFilterField","filterField","onChangeQuery","query","value","onChange","event","target","Object","values","option","placeholder","style","pointerEvents","Loader","TodoModal","useState","selectedUser","setSelectedUser","isLoading","setIsLoading","useEffect","userId","catch","Error","finally","href","email","name","App","setTodos","isTodosLoading","setIsTodosLoading","All","setFilterField","setQuery","setSelectedTodo","filteredTodos","useMemo","Completed","filter","Active","string","preparedString","toLowerCase","trim","preparedQuery","includes","checkQuery","getFilteredTodos","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.00c3fdac.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum FilterType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodo: Todo | null,\n  onChangeSelectedTodo: (todo: Todo | null) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  onChangeSelectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const { id, title, completed } = todo;\n        const isIdSelected = id === selectedTodo?.id;\n\n        return (\n          <tr\n            data-cy=\"todo\"\n            key={id}\n            className={classNames({\n              'has-background-info-light': isIdSelected,\n            })}\n          >\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames({\n                'has-text-danger': !completed,\n                'has-text-success': completed,\n              })}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onChangeSelectedTodo(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('far', {\n                    'fa-eye': !isIdSelected,\n                    'fa-eye-slash': isIdSelected,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import React from 'react';\nimport { FilterType } from '../../types/FilterType';\n\ntype Props = {\n  onChangeFilterField: (FilterType: FilterType) => void;\n  filterField: FilterType;\n  onChangeQuery: (event: string) => void;\n  query: string;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  onChangeFilterField,\n  filterField,\n  onChangeQuery,\n  query,\n}) => {\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChangeQuery(event.target.value);\n  };\n\n  const handleSortTypeChange = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    onChangeFilterField(event.target.value as FilterType);\n  };\n\n  const handleClearInput = () => {\n    onChangeQuery('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            className=\"is-capitalized\"\n            data-cy=\"statusSelect\"\n            value={filterField}\n            onChange={handleSortTypeChange}\n          >\n            {Object.values(FilterType).map(option => (\n              <option\n                className=\"is-capitalized\"\n                value={option}\n                key={option}\n              >\n                {option}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInputChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          {query && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearInput}\n              aria-label=\"clearInput\"\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedTodo: Todo;\n  onChangeSelectedTodo: (todo: Todo | null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  onChangeSelectedTodo,\n}) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    getUser(selectedTodo?.userId)\n      .then(setSelectedUser)\n      .catch(() => {\n        throw new Error('Cant get user from server');\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onChangeSelectedTodo(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed\n                ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                )\n                : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n\n              {' by '}\n\n              <a href={`mailto:${selectedUser?.email}`}>\n                {selectedUser?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useState, useEffect, useMemo } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { FilterType } from './types/FilterType';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nfunction checkQuery(string: string, query: string): boolean {\n  const preparedString = string.toLowerCase().trim();\n  const preparedQuery = query.toLowerCase().trim();\n\n  return preparedString.includes(preparedQuery);\n}\n\nfunction getFilteredTodos(todos: Todo[], query: string, filterField: FilterType) {\n  let filteredTodos = todos;\n\n  if (filterField !== FilterType.All) {\n    switch (filterField) {\n      case FilterType.Completed: {\n        filteredTodos = filteredTodos.filter(({ completed }) => completed);\n        break;\n      }\n\n      case FilterType.Active: {\n        filteredTodos = filteredTodos.filter(({ completed }) => !completed);\n        break;\n      }\n\n      default:\n        throw new Error('Error');\n    }\n  }\n\n  if (query) {\n    filteredTodos = filteredTodos.filter(({ title }) => checkQuery(title, query));\n  }\n\n  return filteredTodos;\n}\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isTodosLoading, setIsTodosLoading] = useState(false);\n  const [filterField, setFilterField] = useState(FilterType.All);\n  const [query, setQuery] = useState('');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    setIsTodosLoading(true);\n    getTodos()\n      .then(setTodos)\n      .catch(() => {\n        throw new Error('Cant get todos from server');\n      })\n      .finally(() => setIsTodosLoading(false));\n  }, []);\n\n  const filteredTodos = useMemo(() => {\n    return getFilteredTodos(todos, query, filterField);\n  }, [todos, query, filterField]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onChangeFilterField={setFilterField}\n                filterField={filterField}\n                onChangeQuery={setQuery}\n                query={query}\n              />\n            </div>\n\n            <div className=\"block\">\n\n              {filteredTodos.length ? (\n                <TodoList\n                  todos={filteredTodos}\n                  onChangeSelectedTodo={setSelectedTodo}\n                  selectedTodo={selectedTodo}\n                />\n              ) : (\n                isTodosLoading && <Loader />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          onChangeSelectedTodo={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}